@import "mixins";

$spriteWidth:70px;
$spriteHeight:80px;

// debug mode
div { outline:1px solid pink; }

.scene { position:absolute; top:50px; left:50px; right:50px; bottom:50px; overflow:hidden; }
.keys { position:absolute; padding:0px 10px; top:0; right:0; }

// element who's going to receive this class will be reversed / mirrored :)
.flip { @include transform(scaleX(-1)); }

// ken character
.ken { 
    position:absolute; bottom:0;
    width:$spriteWidth; height:$spriteHeight; 
    background-image:url(../images/ken.png); 
}

// ken's fireball
$animNbr:5; $steps:2;
.fireball { 
    @extend .ken;
    position:absolute; left:100%; 
    margin-left:0; // default margin-left
    background-position:140px 320px; // default background position
    @include transition(margin 1s ease); 
    @include animation(fireball .15s steps($steps) infinite); 
    &.moving { margin-left:500px; } // triggering the movement with this class
}
@include keyframes(fireball) {
    from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
      to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}
// ken's fireball impact explosion
$animNbr:6; $steps:4;
.fireball.explode { @include animation(explode .5s steps(4) 1); }
@include keyframes(explode) {
    from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
      to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}

// stance
$animNbr:2; $steps:4;
.stance { @include animation(stance .5s steps($steps) infinite); }
@include keyframes(stance) {
   from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
     to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}
// hadoken - must be declared AFTER .stance
$animNbr:1; $steps:4;
.hadoken { @include animation(hadoken .5s steps($steps) infinite); }
@include keyframes(hadoken) {
    from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
      to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}
// regular punch
$animNbr:3; $steps:3;
.punch { @include animation(punch .15s steps($steps)); }
@include keyframes(punch) {
    from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
      to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}
// walking
$animNbr:4; $steps:5;
.walk { @include animation(walk .5s steps($steps) infinite); }
@include keyframes(walk) {
    from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
      to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}
// kick
$animNbr:7; $steps:5; $animName:kick;
.#{$animName} { @include animation($animName .5s steps($steps) infinite); }
@include keyframes($animName) {
    from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
      to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}
// kick kick
$animNbr:8; $steps:5; $animName:reversekick;
.#{$animName} { @include animation($animName .5s steps($steps) infinite); }
@include keyframes($animName) {
    from { background-position:0px (-$spriteHeight * ($animNbr - 1)); }
      to { background-position:-($spriteWidth * $steps) (-$spriteHeight * ($animNbr - 1)); }
}